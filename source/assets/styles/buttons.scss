@use "./ease";
@use "./vars";

[role="button"]{
    cursor: pointer;
}

// External links
a[target="_blank"]{
    text-decoration: dashed;
}

button,
input[type=checkbox],
input[type=radio]{
    --size:var(--button-size, 44px);
    // Add if not using autoprefixer
    -webkit-appearance: none;
    // Remove most all native input styles 
    appearance: none;
    border:0;
    border-radius: var(--curve, 4px);
    background-color: transparent;
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    outline: 0;
    min-width: var(--size);
    min-height: var(--size);
    pointer-events: auto;
    box-sizing: border-box;

    // OPTIONAL if it has an icon, invert it too
    &::before{
        filter:brightness(100%) invert(100%);
    }

    transition: 
        var(--time-quick, 90ms) background-color linear,
        var(--time-quick, 90ms) border-color linear;

    &:hover{
        cursor: pointer;
        background-color: var(--col-hover);
        color:var(--col-bg);
        
        // if it has an icon, invert it too
        &::before{
            filter:brightness(100%) invert(100%);
        }
    }

    &:focus-visible{
        background-color:var(--col-blue);
        // background-color:var(--col-orange);
    }

    &:checked{
        background-color: var(--col-plum);
        border-color:var(--col-accent);
    }
      
    &:checked:focus-visible{
        background-color:var(--col-blue);
    }
}

:is( input, button, select, .cta ){
    // For CTAs that only have outlines
    &.ghost{
        background-color: inherit;
        color:var(--col-text);
        border:var(--stroke,1px) var(--col-accent) solid;
        box-sizing: border-box;
        &::before{
            filter: invert(8%) sepia(92%) saturate(5792%) hue-rotate(343deg) brightness(101%) contrast(94%);
        }
    }
    &.full-width{
        display: block;
        flex-grow:1;
        //min-width: 100%;
        // margin-left:var(--pad);
        // margin-right:var(--pad);
    }
    &.icon-chevron{
        --size:44px;
        font-size: 0;
        &::before{
            content:'';
            align-self:center;
            justify-self: center;
            color:var(--col-accent);
            font-size: var(--font-size-h4);
            background-image: url("/source/assets/icons/up-chevron.svg");
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            width: var(--size);
            height: var(--size);
            display: block;
        }        
    }

}

input[type=checkbox]{
    
}

input[type=radio]{
    --size:var(--button-size, 80px);//44px;
  
    background-color:color-mix( in oklch, var(--col-bg) 66%, transparent);
    border:calc( var(--size) / 8 ) solid var(--col-stone, var(--col-charcoal));
    border-radius: 999px;
    grid-area:icon; //1/1/-1/-1;
    display: inline-grid;
    place-content: center;
    
    transition: 
        opacity var(--time-quick, 90ms) linear,
        border-width var(--time-quick, 90ms) ease.$easeInBack; 
 
    &:hover{
        border-color:var(--col-accent);
    }

    &:active{
        border-width:calc( var(--size) / 4 )
    }
}

label{
    input[type=radio]{
        // height: 100%;
    }
    span{
        pointer-events: none;
        position: relative;
    }
}

@supports(selector(:has(p))) {

    label:has(input:checked){

        input[type=radio]{
            background-color: var(--col-accent);
        }

        &::before,
        &::after,
        span{
            color:var(--col-white,white);
        }
    }

}

fieldset label{
    display:inline-grid;
    grid-template-areas:
        "icon" 
        "text"
    ;
    
    gap:calc( var(--pad) / 4 );
    grid-template-columns: 1fr;
    grid-template-rows: 
        1fr 
        auto;

    // align-items: stretch;
    align-items: center;
    justify-items: center;

    text-align: center;
    
    line-height: 1.1;
    padding: 0;

    > * {
        grid-area: text;
    }
    > span{
        grid-area: icon;
    }

    // FIX: for aspect ratio to remain the same irregardless of width...
    // &::after{
    //     content:'';
    //     padding-bottom:100%;
    //     grid-area:1/1/-1/-1;
    //     height:0;
    //     overflow: hidden;
    // }
}


button,
a.cta{
    z-index: 505;
    position: relative;
    // align-self: flex-end;
    // justify-self: end;
    touch-action: manipulation;
    flex-grow: 1;
}

// we need space around the button
.cta{
    margin-top:var(--pad);
    margin-bottom:var(--pad);
    transition: var(--time-quick, 90ms) transform linear;
    &:active{
        transform: var(--button-active);
    }
}

.button-image{
    --size:var(--button-size, 144px);
    background-position: center;
    background-size: contain;
    background-repeat: no-repeat;
    width: var(--size);
    height: var(--size);
    padding: 0;
    border:0;
    color: transparent;
    user-select: none;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
}

.button-close{
    display: inline-block;
    text-align: center;
    font-size: 0;
    box-sizing: border-box;
    border-radius: 99px;
    background-color: var(--col-bg);
    color: transparent;
    overflow: hidden;
    display: grid;
    border:2px solid var(--col-charcoal);
    outline:9px solid var(--col-bg);
    transition: var(--time-quick, 90ms) transform linear;
    // outline:9px solid color-mix( in oklch, var(--col-bg) 38%, transparent );

    &::before{
        content:'^';
        font-size:16px;
        background-image: url(/source/assets/icons/up-chevron.svg);
        background-position: center;
        background-size: contain;
        background-repeat: no-repeat;
        color:transparent;
        grid-area:1/1/-1/-1;
    }

    &:hover{
        color:transparent;
        background-color: var(--col-text);
        &::before{
            background-image: url(/source/assets/icons/up-chevron-white.svg);
        }
    }

    &:active{
        transform: var(--button-active);
    }
}

.button-share-label{
    color: inherit;
}

.button-share{
    --size:var(--button-size, 44px);
    margin:var(--pad) calc(2 * var(--pad));
    color:var(--col-text);
    overflow:hidden;
    padding:0;
    margin:0;
    display: flex;
    flex-wrap: wrap;

    color:transparent;

    img{
        width: 100%;
        max-width: 256px;
        height: auto;
    }
    &::before{
        content:'';
        font-size:inherit;
        background-image: url(/source/assets/icons/share.svg);
        background-position: center;
        // background-size: contain;
        box-sizing:border-box;
        background-size: auto;
        background-repeat: no-repeat;
        width: var(--size, 1lh);
        height: var(--size, 1lh);
        display: inline-block;
        // vertical-align: middle;
        // padding:0 calc(var(--pad)/2);
        // margin-right:calc( var(--pad) / 4 );
        // filter:brightness(100%) invert(100%);
        border: 2px solid black;
        border-radius: 999px;
        padding: 2px;
    }

    &:hover,
    &:focus{
        color:var(--color-text);
    }
}


.label-button-read{
    position: absolute;
    position: sticky;
    font-size: 0;
    background-color: transparent;
  
    // make sure we don't take up any vertical space
    // width:0;
    height:0;
    overflow: visible;
    display: block;
    // margin-top:calc( 2 * var(--pad) + var(--sticky-top) );
   
    // off screen a little bit
    margin-left:calc( -2 * var(--pad) - 3px);
    margin-right:calc( -2 * var(--pad));
 
    transform: scale(0.9);
    transform-origin: center left;
    
    top:calc( 2 * var(--pad) + var(--sticky-top) );
    // right:calc( 2 * var(--pad) );
    // left:calc( 100% - var(--offset-right,0));
    // left:100%;

    padding: 0;  
    z-index: 3;
    
    // shape-outside: circle(50%);
    // float:right;
}
// just to make it zero sized
.sticky-content-wrapper {
    // This div will have the actual height based on its content.
    // Style this as your visible sticky header.
    display: block;
}

.button-read{
    --offset-right: calc( 44px + var(--pad));
    
    
    // always push it beyond every child so that it doesn't
    // get in the way of the layout
    order:99999;
    position: absolute;
    left:0;
    top:0;
    
    border-radius: 999px 0 0 999px  ;
    border-radius: 0 999px 999px 0 ;
    border:2px solid var(--col-charcoal) ;// var(--col-accent);

    background-color:var(--col-charcoal) ;
    // preload the stop!
    background-image: 
        url(/source/assets/icons/play_circle.svg),
        url(/source/assets/icons/stop_circle.svg);
    background-size: contain;
    background-position: right;
    width:calc(var(--pad) * 2);
    
    // this allows it to not create space in its sticky home
    // height:0;
    min-height:calc(var(--pad) * 2);
    // no wider than the gutter
    max-width:calc(var(--pad) * 2);
    transform: translateX(-33%);
    font-size:0;
    color:transparent;

    opacity: 0.8;

    box-sizing: border-box;
    box-shadow: var(--shadow);

    &::before{
        content:'';
        position: absolute;
        top:0;
        left:0;
        width: 100%;
        height: 100%;
        background: inherit;
        background-color: transparent;
        // filter: brightness(100%) invert(100%);
        border-radius: 999px;
        overflow: hidden;
        overflow: clip;
    }

    &[data-speaking]{
        background-image: url(/source/assets/icons/stop_circle.svg);
    }

    &:hover, &:active{
        background-color: var(--col-accent);
        &::before{
            filter:brightness(100%) invert(100%);
        }
        // filter:brightness(100%) invert(100%);
    }
}

// clear some room for the button
// [data-readable] .button-read + *:first-of-type{
//     padding-right:calc( var(--pad) * 3);
// }



label[for="toggle-midi"]{
// #toggle-midi{
    // position: absolute;
    padding:0;
    margin: 0;
    // bottom:var(--pad);
    // left:var(--pad);
    width: fit-content;
  
    &::before{
        content: '';
        background-image:url("/source/assets/icons/midi-copyright-free.svg");
        // background-image:url("../logos/midi-association.svg");
        background-repeat: no-repeat;
        background-position: center;
        grid-area: 1/1/-1/-1;
        display: none;
        z-index: 1;
    }

    &:has(:checked)::before{ 
        filter:brightness(0%) invert(100%);
    }
}

aside > label[for="toggle-midi"]{
    display: grid;
    font-size: 0;
    color: transparent;
    // margin-bottom: var(--pad);
 
    &::before{
        display: block;
    }
}

#toggle-midi{
    --size:66px;
    grid-area: 1/1/-1/-1;
    border:2px solid black;// var(--col-border);
    background-color:var(--col-accent);
    // padding: 2px;
    border-radius: 999px;
    overflow: hidden;
    &:hover{
        border-color:var(--col-plum);
        background-color:var(--col-white);
        // filter:brightness(100%) invert(100%);
    }
}

#button-text-size-increase,
#button-text-size-decrease{
    &::before{
        content:'';
        display: block;
        top:0;
        left:0;
        position: absolute;
        width: 100%;
        height: 100%;
        background-image:url("/source/assets/icons/font_decrease_filled.svg");
        background-size: contain;
        background-repeat: no-repeat;
        // make black
        filter:brightness(0);
    }
    &:hover,&:active{
        background-color: var(--col-plum);
        &::before{
            filter:brightness(100%) invert(100%);
        }
    }
}

#button-text-size-decrease{
    &::before{
        background-image:url("/source/assets/icons/font_decrease_filled.svg");
    }
    // background-image:url("/source/assets/icons/font_decrease_filled.svg");
}

#button-text-size-increase{
    &::before{
        background-image:url("/source/assets/icons/font_increase_filled.svg");
    }
    // background-image:url("/source/assets/icons/font_increase_filled.svg");
}


#toggle-mute{
    appearance: none;
    border:0;
    outline: 0;

    min-width: 44px;
    min-height: 44px;
    padding:0;
    margin:0;
    cursor: pointer;

  
    background-image: url(/source/assets/icons/volume_off-24px.svg);
    background-size: contain;

    // how to invert colours?
    &:hover{
        filter: invert(1);
        background-color: hsl(169deg, 80%, 45%);
    }
   
    &:checked{
        background-image: url(/source/assets/icons/volume_mute-24px.svg);
    }
}


[data-play-timbre]{
    color: var(--col-text);
    border:1px solid var(--col-border, var(--col-text) );
    background-color: color-mix(in srgb, var(--col-bg) 60%, transparent);
    padding:calc( var(--pad) / 2 );
    // padding-left:calc( var(--pad) / 2 );
    // padding-right:calc( var(--pad) / 2 );
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    gap:0 calc(var(--pad) / 4);

    &:hover{
        background-color: var(--col-accent);
        border-color: var(--col-text);
    }
}

.button-play,
button[data-control-play]{
    &::before{
        content:'';
        font-size:inherit;
        background-image: url(/source/assets/icons/play_arrow.svg);
        background-position: center;
        background-size: contain;
        background-repeat: no-repeat;
        width: var(--size, 1lh);
        height: var(--size, 1lh);
        display: inline-block;
        vertical-align: middle;
        // padding:0 calc(var(--pad)/2);
        margin-right:calc( var(--pad) / 4 );
        filter:brightness(100%) invert(100%);
    }
}

// Full width but we overlay smaller buttons over the top
// so we kind of right justify stuff
[data-control-play]{
    border-top: var(--stroke,1px) solid white;
    border-bottom: var(--stroke,1px) solid white;
    border-radius: 0;//999px;
    // padding-right:2ch;
    min-height: 66px;
    background-color: var(--col-accent);
    box-sizing: border-box;
    padding-left:var(--pad);
    padding-right:var(--pad);
    // background-color: color-mix( in oklch, var(--col-accent) 66%, transparent );
    
    &:hover{
        background-color: var(--col-plum);
    }
}

label[for="button-happy"]{
    grid-area:happy;
}

#button-happy{
    border-radius:var(--curve) 0 0 var(--curve);
    border-radius:var(--button-curve, var(--curve)) 0 0 var(--button-curve, var(--curve));

    align-self: start;
    text-align: left;
    text-indent:calc( var(--pad) * 2 );
    background-image: url(/source/assets/figures/happy.svg);
    transition: var(--time-quick, 90ms) transform linear;
    &:active{
        transform: var(--button-active);
    }
    &:hover{
        background-blend-mode: screen;
        background-color: var(--col-plum);
    }
}

label[for="button-sad"]{
    grid-area:sad;
}


#button-sad{
 
    align-self: end;
    box-sizing: border-box;
    padding: var(--pad);;
    border-radius:0 var(--button-curve, var(--curve)) var(--button-curve, var(--curve)) 0;
    
    text-align: right;
    text-indent:77px;
    background-image: url(/source/assets/figures/sad.svg);
    transition: var(--time-quick, 90ms) transform linear;

    &:active{
        transform: var(--button-active);
    }
    &:hover{
        background-blend-mode: screen;
        background-color: var(--col-plum);
    }
}

// nav // #process-links{}
#drums{
    button{
        //border:2px solid var(--col-border);
        // border-radius: var(--curve);
        font-family: 'noto-emoji';
        max-width: 66px;
        min-height: 64px;
        color: transparent;
        background-color: var(--col-accent);
        border-radius: 0;
        padding:0;
        box-sizing: border-box;
        border:var(--stroke, 1px) solid var(--col-white);
        // border-top:var(--stroke,1px) solid var(--col-white);
        // border-bottom:var(--stroke,1px) solid var(--col-white);
        border-left: none;
        border-top: none;
       
        &::before{
            display: inline-block;
            vertical-align: middle;
            color: white;
            filter:drop-shadow(0 0 6px var(--col-stone));
        }
        &:hover,
        &:active{
            background-color: var(--col-plum);
            // border-color:var(--col-plum);
        }
    }
}

// TIMBRES ==============================================================

#song-timbre-next,
#song-timbre-previous,
#song-timbre-random{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  
    min-width: 44px;
    max-height: 66px;
    margin:0;
    padding: 0;
    gap:calc(var(--pad) / 4 );
  
    min-width:11ch;
   
    &::before{
        content:'';
        background-repeat: no-repeat;
        background-position: center;
        background-size: contain;
        width:var(--icon-size, 44px);
        height:var(--icon-size, 44px);
        display: inline-block;
        vertical-align: middle;
        // filter:brightness(0) invert(1);
    }
}

#song-timbre-previous{
    &::before{
        background-image: url('/source/assets/icons/skip_previous.svg');   
    }
}

#song-timbre-next{
    &::before{
        background-image: url('/source/assets/icons/skip_next.svg');
    }
}
#song-timbre-random{
    &::before{
        background-image: url('/source/assets/icons/shuffle.svg');  
        // background-image: url('/source/assets/icons/fast_forward_black_24dp.svg');  
    }
}

#song-timbre-select{
    
    display: flex;
    text-align: center;
    align-content: center;
    justify-content: center;
    align-items: center;
    justify-items: center;

    font-size:var( --step--2, 22px);
    padding-left:var(--pad);
    // padding-top:calc( (var(--icon-size) )/ 2 + var(--pad));
    // padding-bottom:calc( (var(--icon-size))/ 2 + var(--pad));
    border-radius: var(--curve, 4px);
    color: var(--col-white);
    // background-color: var(--col-accent);
    // box-shadow:var(--shadow-button);
    border:0;
    margin:0;
    // height: 100%;
    width: 100%;
    min-height: 44px;
   // border:var(--stroke,1px) solid var(--col-accent);
}

label[for="timbre-sine"]{
    &::before{
        content:'';
        color: inherit;
       
        grid-area:icon;
        width:22px;
        height:22px;
        // background-color: currentColor;
        border-radius: 99px;
        border: 4px solid currentColor;
        z-index: 1;
        box-sizing: border-box;
    }
}

label[for="timbre-square"]{
    &::before{
        content:'';
        color: inherit;
       
        grid-area:icon;
        width:22px;
        height:22px;
        background-color: currentColor;
        // border: 4px solid currentColor;
        z-index: 1;
        box-sizing: border-box;
    }
}

label[for="timbre-triangle"]{
    &::before{
        content:'';
        color: inherit;
       
        grid-area:icon;
        width: 0;
        height: 0;
        border-left: 11px solid transparent;
        border-right: 11px solid transparent;
        border-bottom: 22px solid currentColor;
        // background-color: currentColor;
        z-index: 1;
        box-sizing: border-box;
    }
}

label[for="timbre-sawtooth"]{
    &::before,
    &::after{
        content:'';
        color: inherit;
        grid-area:icon;
        z-index: 1;
        box-sizing: border-box;
        width: 0;
        height: 0;
        border-bottom: 22px solid currentColor;
        border-left: 22px solid transparent;
        padding:0;
    }
    &::before{
        transform: translateX(-50%);
    }

    &::after{
        transform: translateX(50%);
    }
}

a.back-to-top,
a.skip-to-content{
    
    --icon:url(/source/assets/icons/up-chevron.svg);
    --anim: BackToTop;
    
    z-index: 868;

    display: grid;
    grid-template-columns: 0 1fr;
    font-size: 0;
   
    overflow: hidden;
    overflow: clip;
    color: transparent;
    align-items: center;
    justify-content: center;
    justify-self: end;
    align-self: end;
    box-sizing: content-box;
   
    background-color: var(--col-accent);
    margin-bottom:1px;
    min-height: 100%;
    height: var(--sticky-top);
    padding:calc(var(--pad) / 4);
    padding-top:0;
    padding-bottom:0;
    
    &::after{
        content:'';
        order:-99;
        min-width: 44px;
        min-height: 44px;
        display: inline-block;
        vertical-align: middle;
        background-image: var(--icon);
        background-repeat: no-repeat;
        background-size: contain;
        background-position: center;
        filter: invert(100%) contrast(92%);
        // transition: 
        //     var(--time-quick, 90ms) opacity ease-in-out,
        //     var(--time-quick, 90ms) transform ease-in-out;
    }

    &:hover::after,
    &:active::after{
        // transform: translateY(-100%);
        animation: var(--anim) 0.42s ease-in-out;
    }   
}

a.skip-to-content{
         
    --icon:url(/source/assets/icons/down-chevron.svg);

    &:hover::after,
    &:active::after{
        animation-direction:reverse;
    }
}

a.back-to-top{
  
    right: var(--right-hand-column);
    top:calc(1px + var(--sticky-top));
    position: sticky;
    // left:100%;
   
    // margin-top:1px;
    order:-1;
}
// Different Sizes ======================================================

@media screen and (min-width:vars.$max-width) {
    
    /*
    --right-hand-column
    // Text only version
    a.back-to-top{
        grid-template-columns: auto 1fr;
        font-size: inherit;
        color:var(--col-white);
        // padding:var(--pad);
        // max-width:88px;
        // max-width: calc(2 * 44px);

        &::after{
            display: none;
        }
    }*/

    [data-play-timbre]{
        flex-wrap: wrap;
        flex-direction: row;
    }
}

// with space in the gutters
@media screen and (min-width:vars.$max-width) {
    
    .label-button-read{
        // z-index: -1;
        // float:right;
        // transform: translateX( calc( -100% - var(--pad) * 2 + 2px ) ); 
    }
    .button-read{
        transform: translateX( 0 );
    }
    // add the icon back in and offset to the right of the content
    a.skip-to-content,
    a.back-to-top{
        &::after{
            display: inline-block;
        }
    }

    a.back-to-top{
        // --p:calc( (100vw - var(--max-section-width)) / 2 );
        // right:calc( var(--pad) );
        // left:calc( (100vw - var(--max-section-width) - var(--pad) ) / 2 );
        // transform: translateX(100%);
        // transform: translateX(calc( var(--pad) + 100%));
    }
}

// BIGGEST SIZE - max width + gutters
// when the screen is wider than --max-section-width
// we need to add some things together
@media screen and (min-width:vars.$max-width-plus-button) {
    .label-button-read{
        --offset-right: calc(3 * 44px + var(--pad) * 2);
        top:calc( 0 * var(--pad) + var(--sticky-top) );
        left:0;
        // margin-left:calc( -2 * var(--pad) );

        // right:calc( 2 * var(--pad) );
        // right:calc( 100% + 3 * var(--pad) );
        // right:calc( 100%  );
        // right:calc(100% + var(--pad) * 2 );
        
        // left:auto;

        // margin:0;
        // margin-left:calc( -2 * var(--pad) );
        // float:left;
        // transform-origin: left center;
        // transform: translateX( calc(-100%) );// scale(0.9);
        // transform: translateX( calc(-2 * var(--pad) ) );// scale(0.9);
    }
    .button-read{
      // transform: translateX( -50vw);
        transform: translateX( calc(-100% + 8px) );
        border-color:var(--col-stone);
        // margin-right: -1px;
        // border-radius: 0 999px 999px 0;
        border-radius: 999px 0 0 999px;
        
        background-position: center left;
    }
}