@use "./_vars.scss";
/*
	Improved screen reader only CSS class
	@author Gaël Poupard
		@note Based on Yahoo!'s technique
		@author Thierry Koblentz
		@see https://www.cssmojo.com/hide-content-from-sighted-users/
	* 1.
		@note `clip` is deprecated but works everywhere
		@see https://developer.mozilla.org/en-US/docs/Web/CSS/clip
	* 2.
		@note `clip-path` is the future-proof version, but not very well supported yet
		@see https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path
		@see http://caniuse.com/#search=clip-path
		@author Yvain Liechti
		@see https://twitter.com/ryuran78/status/778943389819604992
	* 3.
		@note preventing text to be condensed
		author J. Renée Beach
		@see https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
		@note Drupal 8 goes with word-wrap: normal instead
		@see https://www.drupal.org/node/2045151
		@see http://cgit.drupalcode.org/drupal/commit/?id=5b847ea
	* 4.
		@note !important is important
		@note Obviously you wanna hide something
		@author Harry Roberts
		@see https://csswizardry.com/2016/05/the-importance-of-important/
*/

.sr-only {
	border: 0 !important;
	clip: rect(1px, 1px, 1px, 1px) !important; /* 1 */
	-webkit-clip-path: inset(50%) !important;
		clip-path: inset(50%) !important;  /* 2 */
	height: 1px !important;
	margin: -1px !important;
	overflow: hidden !important;
	padding: 0 !important;
	position: absolute !important;
	width: 1px !important;
	white-space: nowrap !important;            /* 3 */
}

/*
	Use in conjunction with .sr-only to only display content when it's focused.
	@note Useful for skip links 
	@see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
	@note Based on a HTML5 Boilerplate technique, included in Bootstrap
	@note Fixed a bug with position: static on iOS 10.0.2 + VoiceOver
		@author Sylvain Pigeard
		@see https://github.com/twbs/bootstrap/issues/20732
*/

.pad-top{
    padding-top: calc( var(--pad) * 2);
}
.pad-bottom{
    padding-bottom: calc( var(--pad) * 2);
}

// allow these elements to break out of the columns to cover the whole width
// NB. this resets the column lengths :)

header, hgroup,
h1, h2, h3, h4, h5, 
blockquote, hr, details, aside, figure, form, blockquote, 
.flood, .box {
    column-span: all; 
}

figure {
    break-after: column;
}


.z-top{
    z-index: 99999;
}

.comic{
    filter: invert(1);
    mix-blend-mode: exclusion;
}

.bumpers{
	margin-top:var(--pad);
	margin-bottom:var(--pad);
}

.page{
    width:100%;
    padding:calc( 2 * var( --pad ));
   
    margin-left:auto;
    margin-right:auto;
    box-sizing: border-box; 
    background-color: inherit;
	// overflow: hidden;
	position: relative;
}

// NB. As the button always consumes space
.page[data-readable]{
    padding-top: 0;    
}

// Sets whatever element to be the EXACT same size
// as the viewport which will try to prevent overflow
.viewport-height {
    // height: 100%;
    min-height:var(--visible-height,100vh);
}

// Used for stretching areas inside another element
.viewport-width{
    min-width: 100vw;
    // width: 100%;
    margin:0 calc( -50vw + 50%) ;

    // transform: translateX(100vw);
}

// fix to a set width and then centralise
.fixed-width{
	max-width: var(--max-section-width, 1000px); 
	margin-left:auto;
    margin-right:auto;
}

// fill the entire width of the screen
.full-width{
    width: 100%;
    max-width: 100vw;
	padding-left:0;
	padding-right:0;
}

.full-height{
    min-height: 100vh;
    min-height: 100dvh;
	background: inherit;
}

p.full-height{
    display: grid;
	place-items: center;
}

// this will try and make the iamge as big as possible
// without cropping
img.flood{
	height: calc( 100% - var(--footer-height,0) - var(--sticky-top, 0));
	width: auto;
	max-height: 100%;
	max-width: 100vw;
	position: absolute;
	left: 50%;
	top:0;
	transform: translateX(-50%);
}

// an anchor that is in the regular colours
a.secret-link{
    color: inherit;
    text-decoration: inherit;
    &:hover, &:focus, &:active{
        text-decoration: underline;
    }
}

// if we only want the children to have backgrounds
// in the case of elements that paint in the backgreeound
.bg-children{
    --space:2;

    // margin-bottom: 0;
    position: relative;
    display: grid;

    > *:not(section, button, article,div ){
        min-width:100%;// calc(100% - 2 * var(--space) * var(--pad));
        padding-left:calc(1 * var(--space) * var(--pad));
        padding-right:calc(1 * var(--space) * var(--pad)); 
        box-sizing: border-box;
    }

    > *:not(section, label, button, article,div, .bg-clear, hr){
        background-color: var(--col-bg);
    }
    
    > header:first-of-type{
        padding-top:calc(1 * var(--space) * var(--pad));
    }
    > :last-child{
        padding-bottom:calc(1 * var(--space) * var(--pad));
    }


    * + .bg-clear:not(.flood-fill-parent){
        // in clear mode we will have gaps or weird
        // spaces so we fill those iin using borders
        border-top: solid calc(2 * var(--pad)) transparent;
        // border-bottom: solid calc(2 * var(--pad)) var(--col-bg);
    }

    :not(
        .wavey,
        .square,
        .sawtooth,
        .wavey-top,
        .square-top,
        .sawtooth-top,
        .wavey-bottom,
        .square-bottom,
        .sawtooth-bottom
    ) + .bg-clear{
        // in clear mode we will have gaps or weird
        // spaces so we fill those iin using borders
        border-color:var(--col-bg);
        // border-bottom: solid calc(2 * var(--pad)) var(--col-bg);
    }
    
    // add a background fill at the end to all none wavey backghrounds
    .bg-clear + *:not(
        .wavey,
        .square,
        .sawtooth,
        .wavey-top,
        .square-top,
        .sawtooth-top,
        .wavey-bottom,
        .square-bottom,
        .sawtooth-bottom
    ){ 
        border-top: solid calc(2 * var(--pad)) var(--col-bg);
    }
}


hr{
    clear: both;
    display: block;
    background: var(--col-warm-grey-light);
    color: var(--col-warm-grey-light);
    border: 0;
    margin: 0 0 calc( var(--pad) * 2 - 1px ) 0;
    height: 1px;
}


.bg-children{
    // acts asagap
    hr{
        // height:0;
        // margin: calc(var(--pad)*2) 0;
        min-height: calc(var(--pad)*4);
        margin: 0;
        background-color: transparent;
    }
}





// inside curves in transparent windows
// .bg-clear > .bg-clear,
// .bg-children:not(.wavey) > .bg-clear
.add-window-curves-top{
    --cuve-size:99px;
    position: relative;

    &::before{
        content: "";
        position: absolute;
        top:0;
        left:0;
        height: var(--cuve-size);
        bottom: calc( -1 * var(--cuve-size));
        width: calc( var(--cuve-size) / 2 );
        border-top-left-radius: calc( var(--cuve-size) / 2 );
        box-shadow: 0  calc( var(--cuve-size) / -2 ) 0 0 var(--col-bg);
    }
    &::after{
        content: "";
        position: absolute;
        top:0;
        right:0;
        height: var(--cuve-size);
        bottom: calc( -1 * var(--cuve-size));
        width: calc( var(--cuve-size) / 2 );
        border-top-right-radius:  calc( var(--cuve-size) / 2 );
        box-shadow: 0  calc( var(--cuve-size) / -2 ) 0 0 var(--col-bg);
    }
}

// special case of bg that actually sets the background of it's children
.bg-holey{
    // overflow: hidden;
    // overflow: clip;
    margin-top: 0;
    padding:0;
    background-color: transparent;

    figure{
        &::before {
            content: "";
            position: absolute;
            
            background-color: #0074D9;
            bottom: -50px;
            height: 50px;
            width: 25px;
            border-top-left-radius: 25px;
            box-shadow: 0 -25px 0 0 #001f3f; /* This is where the magic happens! */
        }
    }
}

// for when you want to have sections of clear you need to start
// with a clear background then set all elements unless explicitly stated
.bg-clear-holey{
    --space:2;
    margin-right:calc(-1 * var(--space) * var(--pad)); 
    margin-left:calc(-1 * var(--space) * var(--pad)); 
}

.bg-translucent{
	--alpha:66%;
	background-color: color-mix(in srgb, var(--col-bg) var(--alpha,66%, transparent));
}

.bg-clear{
	background-color: transparent;
    // z-index: initial;
}

.bg{
	background-color: var(--col-bg);

	// > *{
	// 	background-color: inherit;
	// }

	.sticky.full-height + p{
		&::before{
			content:'';
			position: absolute;
			bottom:100%;
			left:0;
			right: 0;
			background-image: linear(to top, transparent 0%, var(--col-bg) 100%);
			height: 25vh;
			display: block;
		}
	}
}

.bg-dark{
	background-color: var(--col-charcoal);
}

.tongue{
	border-top: var(--pad) solid var(--col-accent);
}

.box{
    padding: var(--pad);
    margin:var(--pad) 0;
    clear: both;
    border:var(--stroke, 1px) solid var(--col-accent);
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

// 6 x 9 grid but we subdivide it for style
.grid{
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: repeat(9, 1fr);
}


.grid-icon-menu{
    --quantity:4;
    --gap:calc(var(--pad) / 2);
    --size:calc( 100% / var(--quantity) );

    border:var(--col-border) 2px dashed;
    padding: var(--pad);
    border-radius: var(--curve);
    
    position: relative;
    list-style: none;
    display: grid;
    gap: var(--gap, 0 ) var(--pad);

    grid-template-areas: 
        "icons"
        "texts";

	grid-template-columns: repeat(auto-fit, minmax(44px, 1fr));
	counter-reset: steps;

    	// $end:49;
	@for $i from 1 to 9 {
		li:nth-of-type(#{$i}){
			--i: calc(#{$i} - 1 );
		}
	}

    &:not( :focus-within, :hover)::before{
        content:"Menu";
        // color: var(--col-plum);
        font-size: 150%;  
        text-align: left;
        z-index: 0;
        position: absolute;
        top:var(--pad);
        left:0;
        right:0;
        text-align: center;
        // fade in after a delay
        opacity: 0;
        animation: FadeTo var(--time-quick, 90ms) linear 0.5s both;
    }

    li{
        grid-area: icons;
    }

    li a{

        color:transparent;
		text-align: center;
		display: flex;
        flex-direction: column;
		counter-increment: steps;
		text-decoration: none;
        gap:calc( var(--pad) / 2 );
        pointer-events: none;
        transition: color var(--time-quick, 90ms) linear;

		&::before{
            color: var(--col-plum);
            // background-color: var(--col-bg);
            font-size: 200%;;
			content:counter(steps) ".";
            visibility: hidden;
            text-align: left;
            z-index: 1;
		}

        img{
			--x:calc( var(--pad) / 2 + (100% + var(--pad)) * var(--i) );
            pointer-events: all;
            width:calc(var(--size) - var(--pad));
            // margin-left:calc( var(--size) * var(--i) + var(--gap)  );
            // margin-bottom:calc( var(--gap) );
			// margin-right:0;
		    
            // transform: translateX( calc(100% * var(--i)) );
            transform: translate( var(--x,0), var(--y,0));
            padding: 0;
            margin: 0;
            border-radius: 999px;
            border:4px solid var(--col-charcoal);
			box-sizing: border-box;
            transform-origin: center;
            transition: border-color var(--time-quick, 90ms) linear;
        }

        &:hover,
        &:focus{
           //var(--col-plum);
            border-color:var(--col-plum);
            color:var(--col-plum);

            &::before{
                visibility: visible;
            }

            img{
                --scale:1.1;
                border-color:var(--col-accent);
            }
        }
    }
}


:is(
	a, button
).centralise{
	margin-left: auto;
	margin-right: auto;
}

.shadow{
	box-shadow: var(--shadow);
    // https://smoothshadows.com/#djEsMSw1LDAuMDgsMjQsMCwwLCMzMzMxMzIsI2U4ZTZkZiwjZmZmZmZmLDI%3D 
    // box-shadow: 
    //     0px 0px 1px rgba(51, 49, 50, 0.02),
    //     0px 0px 4px rgba(51, 49, 50, 0.03),
    //     0px 0px 9px rgba(51, 49, 50, 0.05),
    //     0px 0px 15px rgba(51, 49, 50, 0.06),
    //     0px 0px 24px rgba(51, 49, 50, 0.08);
}

.hide-overflow{
    --space:2;
    overflow: hidden;
    overflow: clip;
    // prevents margins from overflowing
    display: grid;
    min-width: calc( 100% - var(--pad) * 2 * var(--space));
    // min-width: 100%;;
    // margin-left:calc(-1 * var(--space) * var(--pad));
    // margin-right:calc(-1 * var(--space) * var(--pad));
    padding-left:calc(var(--space) * var(--pad));
    padding-right:calc(var(--space) * var(--pad));
}


.clip-overflow{
    overflow: hidden;
	overflow: clip;
}


// To make holes so you can see through the background in 
// CSS is very tricky but this works for single items 
// when used with .hide-overflow above
.flood-fill-parent{
    box-shadow: var(--col-bg) 0 0 0 200vmax;

    legend{
        background-color: var(--col-bg);
    }
}



// split into collumns
.split,
.split-2{

	--half:calc( ( var(--max-section-width)) / 2 );
    --margins:calc( 100% - var(--half) );
    --column-gap:calc( var(--pad) * 2 );

	// flex-grow:0;
    // flex-shrink:0;
    // flex-basis:100%;
    column-width: calc( var(--half) - ( var(--pad) * 4 ));
    // column-width: calc( var(--half) * 0.8 - var(--pad));
    column-gap: var(--column-gap);
    column-rule: 1px dotted var(--col-warm-grey-light);
}


.float{
	float: left;
}

.outside-leaning-polygon{
	shape-outside: polygon(-6.00% 106.19%, 95% 4.21%, 97% 38.31%, 34px 104.87%);
	margin-right:var(--pad);
}

.glyph-grid-list-char{
	user-select: all;
	color:inherit;
}

.icon-plus {
    // thickness
    --b: 10px;
    --col: #0000 90deg,#000 0; 
    --size:50px;
    width: var(--size);
    height: var(--size);
    aspect-ratio: 1;
    background:
        conic-gradient(from 90deg at var(--b) var(--b),var(--col)) 
        calc(100% + var(--b)/2) calc(100% + var(--b)/2)/
        calc(50%  + var(--b))   calc(50%  + var(--b));
}

.overflow-scroll-x {
    --g: radial-gradient(55% 20px, #0009, #0000);  

    overflow: auto;
    background: 
        linear-gradient(#fff 10px, #0000 40px calc(100% - 40px),#fff calc(100% - 10px)) local, 
        var(--g) left   /100% 200%,    
        var(--g) right/100% 200%;
}

.overflow-scroll-y {
    --g: radial-gradient(55% 20px, #0009, #0000);  

    overflow: auto;
    background: 
        linear-gradient(#fff 10px, #0000 40px calc(100% - 40px),#fff calc(100% - 10px)) local, 
        var(--g) top   /100% 200%,    
        var(--g) bottom/100% 200%;
}

:is(h1, h2, h3, h4, h5, h6,p, figcaption).middle{
    text-align: center;
}


.hidden-link{
	font-size: 0;
	color: transparent;
	transform: translateY(5px);
}

// removes any element from the stacking order 
// so that you can then send children to z-indexes 
// in the global order, rather than the one that would
// be created by having a fixed z-index
.detach-z-index{
    z-index: initial;
    > * {
        z-index: 2;
    }
}


.text-scroller-vertical{
	line-height: 1.2;
	font-size: var(--font-size-h5);
	display: grid;
	grid-template-areas: "lead trail";
	grid-template-columns: auto auto;
	column-gap: 1ch;//var(--pad);
	column-gap: 0.55ex;//var(--pad);
	// row-gap: var(--pad);
	margin-top: var(--pad);
	margin-bottom: var(--pad);
	width: fit-content;
	margin-left: auto;
	margin-right: auto;
	position: relative;
	
	// Fade first item in
	// &::before{
	// 	content:'';
	// 	display: block;
	// 	grid-area: trail;
	// 	position: sticky;
	// 	height:calc( 50vh - 1lh );
	// 	top: 0%;
	// 	background-image: linear-gradient(to bottom, transparent, var(--col-bg) 50%);
	// 	z-index: 1;
	// }

	// fade out bottom ones
	&::after{
		content:'';
		display: block;
		grid-area: 1/1/-1/-1;
	
		height: max(5ch, 50vh);
		position: absolute;
		bottom: 0;
		// transform: translateY(50vh);
		width: 100%;
		left: 0;
		background-image: linear-gradient(to bottom, transparent, var(--col-bg) 66%);
		// background-color: red;
		z-index: 1;
	}

	h5{
		font-weight: 250;
		grid-area: lead;
		position: sticky;
		top:50%;
		bottom:calc(50% - .5lh);
		top: calc(50% - .5lh);
		align-self: start;
		justify-self: center;
		font-size: inherit;
		text-align: right;
		justify-self: end;
		// padding-bottom: calc( 50vh - 0.5lh );
		transform: translateY(calc(-100% + 1lh));
	}
	
	ul{
		grid-area: trail;
		list-style: none;
		padding:0;
	
		font-size: inherit;

		display: flex;

		flex-direction: column;
		gap:66vh;//var(--pad);

		&::after{
			content:'';
			padding-bottom: calc( 50vh - 0.5lh );
		}

		li{
			font-size: inherit;
			padding-bottom: 3lh;	// to shield other cptions
			// min-height: 66vh;
			top:50%;
			top: calc(50% - .5lh);
			// place-items: center;
			// place-content: center;
			// display: flex;
			position: sticky;
			width: 100%;
			background-color: var(--col-bg);
			// animation: Text-Scroller;
			// animation-range: calc(50% - .75lh) calc(50% + .75lh);
			// animation-timeline: view();
			// animation-fill-mode: both;
			scroll-snap-align: center;


			&::before{
				content:'';
				display: block;
				position: absolute;
				height:calc( 50vh - 1lh );
				bottom: 100%;
				left: 0;
				right: 0;
				background-image: linear-gradient(to bottom, transparent, var(--col-bg) 50%);
				z-index: 1;
			}

			

			&:first-of-type{
				&::before{
					display: none;
				};
			}
			&:last-of-type{
				padding-bottom: 0;//1lh;
				
			}
		}
	}
}

@supports (overflow: clip){

	.text-scroller-vertical{	
		// WE CANNOT USE overflow as this breaks sticky :(
		// overflow: hidden;
		// clip does work but isn't cross browser
		overflow:clip;
			
		// Fade other items in
		&::before{
			content:'';
			display: block;
			grid-area: trail;
			width: 100%;
			height: max(5ch, 50vh);
			position: sticky;

			top: 0%;
			// Prevent it from falling offf the bottom
			bottom:0;

			transform: translateY(50vh);
			// right:0;
			background-image: linear-gradient(to bottom, transparent, var(--col-bg));
			// background-color: red;
			z-index: 1;
		}
	}
}

@media screen and (min-width:800px){

	.text-scroller-vertical{
		h5{
			// height: 16.686%;	// hack
			transform: none;
		}
		ul{
			li{
				//padding-bottom: 0;
			}
		}
	}
}

.text-scroller-vertical + *{
	z-index: 2;
}

// sticky

.sticky{
	position: sticky;
    top:var(--sticky-top, 0);
	// z-index: -1;
}
.sticky.top{
    top:0;
}

// section .sticky ~ *:not(aside, .sticky){
// 	background-color: inherit;
// 	// padding-top: calc( 3 * var(--pad) );
// }

// see figure line 42


:is(h1, h2, h3, h4, h5, h6) > .sticky{
	display: block;
	// float:right;
}

   
// overlaying images...
.stackable{	
	> .sticky + *{
		background-color: var(--col-bg);
		// padding-bottom: calc( var(--pad) * 2 );
		// padding-top:  calc( var(--pad) * 2 );
		position: relative;
	}
    figure{
        //padding-top: var(--pad);
    }
	figure.sticky{
		background: transparent;
        // breathing space for sticky scrolling
        padding-bottom:50vh;
	}
}


ul.gallery{
	display: grid;
	grid-template-columns: repeat(auto-fit,  minmax(44px, 1fr) );
    gap: var(--pad);
	grid-auto-flow: dense;
	list-style: none;
	padding: 0;
	margin-top:var(--pad);

	figure{
		display: grid;
		grid-template-areas: "stuff";
		border:0;
		padding:0;
		margin: 0;
        box-shadow: var(--shadow);
		> picture,
		> img{
			grid-area:stuff;
			max-width: 100%;
		}
		figcaption{
			grid-area:stuff;
			padding:0;
			margin: 0;
			background-color: transparent;
			color: transparent;
			z-index: 1;
            position: absolute;
            left:50%;
            transform: translateX(-50%);
            text-align: center;
            // z-index: 909;
		}
		&:hover{
			figcaption{
				color: var(--col-accent);
			}
		}
	}
	
	&:nth-child(3n) {
		grid-column: span 4;
		background-color: #12cc12;
	}
 
	&:nth-child(5n) {
		grid-column: span 3;
		background-color: #f5ecec;
	}
 
	&:nth-child(7n) {
		grid-column: span 2;
		background-color: #f35810;
	}
}



[hidden]{
	display:none !important;
}

[inert]{
	pointer-events: none;
}



// only animate when in viewport
@media screen and (prefers-reduced-motion: no-preference) {
    .animation-rock\:on-hover{
        transition: transform var(--time-quick) ease-out;
    }

    .in-viewport{
		.animation-rock,
        .animation-rock\:on-hover:hover{
			--tilt:22deg;
			--duration:calc( 1 * 6s );
			transform-origin: center;
            transform: translate( var(--x,0), var(--y,0));
			animation: RockTranslated var(--duration, 90ms) infinite var(--delay,0s) both ease-out;
		}
	}
}




@property --milliseconds {
    inherits: false;
    initial-value: 0;
    syntax: '<integer>';
}
  
.counting-loop {
    counter-reset: ms var(--milliseconds);
    animation: count 1s steps(100) infinite;
    &:after {
        content: Counter(ms);
    }
}
@keyframes Counter {
    to {
        --milliseconds: 100;
    }
}